// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views", "driverAdapters", "relationJoins", "nativeDistinct"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  //shadowDatabaseUrl = env("PRISMA_SHADOW_DB") // used for migrations
}

model DefaultImage {
  id    String @id @default(cuid())
  altEN String
  altES String
  src   String

  story Story[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Artwork {
  id            String  @id @default(cuid())
  src           String
  altEN         String
  altES         String
  titleEN       String
  titleES       String
  artist        String
  descriptionEN String?
  descriptionES String?
  height        Int
  width         Int

  isVideo Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StoryCategory {
  id  String @id @default(cuid())
  tag String @unique

  categoryEN String
  categoryES String
  categoryFR String?

  order Int?

  image      String?
  imageAltEN String?
  imageAltES String?
  imageAltFR String?

  stories   StoryToCategory[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Pronouns {
  id String @id @default(cuid())

  tag        String  @unique
  pronounsEN String
  pronounsES String
  pronounsFR String?

  stories PronounsToStory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PronounsToStory {
  pronoun   Pronouns @relation(fields: [pronounId], references: [id])
  pronounId String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([storyId, pronounId])
  @@index([storyId])
  @@index([pronounId, storyId])
}

model Story {
  id String @id @default(cuid())

  name String

  response1EN String?
  response2EN String?
  response1ES String?
  response2ES String?
  response1FR String?
  response2FR String?

  userId String? // Not linked - using app auth

  image   DefaultImage? @relation(fields: [imageId], references: [id])
  imageId String?

  pronouns   PronounsToStory[]
  categories StoryToCategory[]

  isInfluencer Boolean @default(false)
  publicSlug   String? @unique

  published Boolean @default(false)

  // For moderation values for submitted stories

  textToxicity    Float? // from https://perspectiveapi.com/
  imageModeration Json? // from https://docs.aws.amazon.com/rekognition/latest/dg/procedure-moderate-images.html

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([published, id])
}

model StoryToCategory {
  category   StoryCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  story      Story         @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId    String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@id([categoryId, storyId])
  @@index([storyId])
  @@index([categoryId])
  @@index([storyId, categoryId])
}

model PartnerOrg {
  id       String  @id @default(cuid())
  name     String  @unique
  href     String
  tag      String
  imageSrc String?
  order    Int
  visible  Boolean @default(true)
  height   Int?
  width    Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([visible])
}

model StorySubmission {
  id     String @id @default(cuid())
  userId String

  responses Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DataMigration {
  id          String   @id @default(cuid())
  jobId       String   @unique
  title       String
  description String?
  createdBy   String
  appliedAt   DateTime @default(now())
}
