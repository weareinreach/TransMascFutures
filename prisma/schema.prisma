// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views", "driverAdapters", "relationJoins", "nativeDistinct"]
}

datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl  = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  //shadowDatabaseUrl = env("PRISMA_SHADOW_DB") // used for migrations
  extensions = []
}

model DefaultImage {
  id    String  @id @default(cuid())
  alt   String
  altEN String? //to be removed
  altES String? //to be removed
  src   String

  story Story[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Artwork {
  id            String  @id @default(cuid())
  src           String
  alt           String
  altEN         String? //to be removed
  altES         String? //to be removed
  title         String
  titleEN       String? //to be removed
  titleES       String? //to be removed
  artist        String
  description   String?
  descriptionEN String?
  descriptionES String?
  height        Int
  width         Int

  isVideo Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StoryCategory {
  id  String @id @default(cuid())
  tag String @unique

  category   String
  categoryEN String? //to be removed
  categoryES String? //to be removed

  order Int?

  image      String?
  imageAlt   String?
  imageAltEN String?
  imageAltES String?

  stories   StoryToCategory[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Pronouns {
  id String @id @default(cuid())

  tag        String  @unique
  pronouns   String
  pronounsEN String? //to be removed
  pronounsES String? //to be removed

  stories PronounsToStory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PronounsToStory {
  pronoun   Pronouns @relation(fields: [pronounId], references: [id])
  pronounId String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([storyId, pronounId])
  @@index([storyId])
  @@index([pronounId, storyId])
}

model Story {
  id String @id @default(cuid())

  name String

  response1 String?
  response2 String?

  response1EN String?
  response2EN String?
  response1ES String?
  response2ES String?

  userId String? // Not linked - using app auth

  image   DefaultImage? @relation(fields: [imageId], references: [id])
  imageId String?

  pronouns   PronounsToStory[]
  categories StoryToCategory[]

  isInfluencer Boolean @default(false)
  publicSlug   String? @unique

  published Boolean @default(false)

  // For moderation values for submitted stories

  textToxicity    Float? // from https://perspectiveapi.com/
  imageModeration Json? // from https://docs.aws.amazon.com/rekognition/latest/dg/procedure-moderate-images.html

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([published, id])
}

model StoryToCategory {
  category   StoryCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  story      Story         @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId    String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@id([categoryId, storyId])
  @@index([storyId])
  @@index([categoryId])
  @@index([storyId, categoryId])
}

model PartnerOrg {
  id       String  @id @default(cuid())
  name     String  @unique
  href     String
  tag      String
  imageSrc String?
  order    Int
  visible  Boolean @default(true)
  height   Int?
  width    Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([visible])
}

model StorySubmission {
  id     String @id @default(cuid())
  userId String

  responses Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DataMigration {
  id          String   @id @default(cuid())
  jobId       String   @unique
  title       String
  description String?
  createdBy   String
  appliedAt   DateTime @default(now())
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view pg_stat_statements_info {
  dealloc     BigInt?
  stats_reset DateTime? @db.Timestamptz(6)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view pg_stat_statements {
  userid                 Int?     @db.Oid
  dbid                   Int?     @db.Oid
  toplevel               Boolean?
  queryid                BigInt?
  query                  String?
  plans                  BigInt?
  total_plan_time        Float?
  min_plan_time          Float?
  max_plan_time          Float?
  mean_plan_time         Float?
  stddev_plan_time       Float?
  calls                  BigInt?
  total_exec_time        Float?
  min_exec_time          Float?
  max_exec_time          Float?
  mean_exec_time         Float?
  stddev_exec_time       Float?
  rows                   BigInt?
  shared_blks_hit        BigInt?
  shared_blks_read       BigInt?
  shared_blks_dirtied    BigInt?
  shared_blks_written    BigInt?
  local_blks_hit         BigInt?
  local_blks_read        BigInt?
  local_blks_dirtied     BigInt?
  local_blks_written     BigInt?
  temp_blks_read         BigInt?
  temp_blks_written      BigInt?
  blk_read_time          Float?
  blk_write_time         Float?
  temp_blk_read_time     Float?
  temp_blk_write_time    Float?
  wal_records            BigInt?
  wal_fpi                BigInt?
  wal_bytes              Decimal? @db.Decimal
  jit_functions          BigInt?
  jit_generation_time    Float?
  jit_inlining_count     BigInt?
  jit_inlining_time      Float?
  jit_optimization_count BigInt?
  jit_optimization_time  Float?
  jit_emission_count     BigInt?
  jit_emission_time      Float?

  @@ignore
}
